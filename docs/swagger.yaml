definitions:
  echo.HTTPError:
    properties:
      message: {}
    type: object
  handlers.APIKeyDetails:
    properties:
      created_at:
        description: Timestamp of when the API key was created
        example: "2023-10-01T12:00:00Z"
        type: string
      description:
        description: Description of the API key
        example: This key is used for accessing the QDroid API.
        type: string
      expires_at:
        description: Expiration date for the API key
        example: "2024-12-31"
        type: string
      key_id:
        description: Key ID of the created API key
        example: ak_jkdfkjdfkdfjkd
        type: string
      last_used_at:
        description: Last used timestamp of the API key
        example: "2023-10-01T12:00:00Z"
        type: string
      name:
        description: Name of the API key
        example: My API Key
        type: string
    type: object
  handlers.APIKeyListResponse:
    properties:
      data:
        description: List of API keys
        items:
          $ref: '#/definitions/handlers.APIKeyDetails'
        type: array
      message:
        description: Message indicating successful retrieval
        example: API keys retrieved successfully
        type: string
      pagination:
        allOf:
        - $ref: '#/definitions/handlers.PaginationDetails'
        description: Pagination details
    type: object
  handlers.AuthResponse:
    properties:
      message:
        description: Message indicating successful operation
        example: Operation successful
        type: string
      session_token:
        description: |-
          Authentication session token
          This token is used for subsequent authenticated requests.
          It should be stored securely by the client.
          Should be used in the Authorization header as a Bearer token.
        example: sample_session_token
        type: string
    type: object
  handlers.BulkSendMessageRequest:
    properties:
      messages:
        description: List of messages to send
        items:
          $ref: '#/definitions/handlers.SendMessageRequest'
        type: array
    type: object
  handlers.BulkSendMessageResponse:
    properties:
      count:
        description: Number of messages accepted for processing
        example: 5
        type: integer
      message:
        description: Message indicating that bulk processing has started
        example: Bulk message processing started. Check your logs for more details.
        type: string
    type: object
  handlers.ChangePasswordRequest:
    properties:
      current_password:
        description: |-
          Current password
          required: true
        example: MySecretPassword@123
        type: string
      new_password:
        description: |-
          New password
          required: true
        example: MyNewPassword@456
        type: string
    type: object
  handlers.CreateAPIKeyResponse:
    properties:
      api_key:
        description: API key created
        example: ak_jkdfkjdfkdfjkdlklklkllklklklklklklklklklklkl
        type: string
      created_at:
        description: Timestamp of when the API key was created
        example: "2023-10-01T12:00:00Z"
        type: string
      description:
        description: Description of the API key
        example: This key is used for accessing the QDroid API.
        type: string
      expires_at:
        description: Expiration date for the API key
        example: "2024-12-31"
        type: string
      key_id:
        description: Key ID of the created API key
        example: ak_jkdfkjdfkdfjkd
        type: string
      message:
        description: Message indicating successful creation
        example: API key created successfully
        type: string
      name:
        description: Name of the API key
        example: My API Key
        type: string
    type: object
  handlers.CreateBindQueueRequest:
    properties:
      country_code:
        description: Country code (e.g. 237)
        example: "237"
        type: string
      mcc:
        description: Mobile Country Code (MCC) (e.g. 624)
        example: "624"
        type: string
      mnc:
        description: Mobile Network Code (MNC) (e.g. 01)
        example: "01"
        type: string
    type: object
  handlers.CreateBindQueueResponse:
    properties:
      exchange:
        description: Exchange ID the queue was bound to
        example: exch_jkdfkjdfkdfjkd
        type: string
      message:
        description: Message indicating successful creation and binding
        example: Queue created and bound to exchange successfully
        type: string
      queue:
        description: Name of the created queue
        example: exch_jkdfkjdfkdfjkd_237_11223
        type: string
      routing_key:
        description: Routing key used for binding
        example: exch_jkdfkjdfkdfjkd.237.62401
        type: string
      vhost:
        description: Vhost used for the operation
        example: acc_1234567890
        type: string
    type: object
  handlers.CreateExchangeRequest:
    properties:
      description:
        description: Description of the exchange
        example: This exchange handles OTP messages.
        type: string
      label:
        description: Label for the exchange
        example: OTP Messages
        type: string
    type: object
  handlers.CreateExchangeResponse:
    properties:
      created_at:
        description: Timestamp of when the exchange was created
        example: "2023-10-01T12:00:00Z"
        type: string
      description:
        description: Description of the created exchange
        example: This exchange handles OTP messages.
        type: string
      exchange_id:
        description: ID of the created exchange
        example: ex_jkdfkjdfkdfjkd
        type: string
      label:
        description: Label of the created exchange
        example: OTP Messages
        type: string
      message:
        description: Message indicating successful creation
        example: Exchange created successfully
        type: string
      updated_at:
        description: Timestamp of when the exchange was last updated
        example: "2023-10-01T12:00:00Z"
        type: string
    type: object
  handlers.DeleteAccountRequest:
    properties:
      password:
        description: |-
          User's password
          required: true
        example: MySecretPassword@123
        type: string
    type: object
  handlers.EventLogDetails:
    properties:
      carrier:
        description: Carrier used for the message
        example: MTN
        type: string
      category:
        description: Event category
        example: MESSAGE
        type: string
      created_at:
        description: Timestamp of when the event was created
        example: "2023-10-01T12:00:00Z"
        type: string
      description:
        description: Event description
        example: Message sent successfully
        type: string
      eid:
        description: Event ID
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      exchange_id:
        description: Exchange ID associated with the event
        example: ex_jkdfkjdfkdfjkd
        type: string
      queue_id:
        description: Queue ID
        example: exch_jkdfkjdfkdfjkd.237.62401
        type: string
      queue_name:
        description: Queue name
        example: exch_jkdfkjdfkdfjkd_237_62401
        type: string
      status:
        description: Event status
        example: QUEUED
        type: string
      to:
        description: Recipient phone number or email
        example: "+2371234567890"
        type: string
      updated_at:
        description: Timestamp of when the event was last updated
        example: "2023-10-01T12:00:00Z"
        type: string
    type: object
  handlers.EventLogListResponse:
    properties:
      data:
        description: List of event logs
        items:
          $ref: '#/definitions/handlers.EventLogDetails'
        type: array
      message:
        description: Message indicating successful retrieval
        example: Event logs retrieved successfully
        type: string
      pagination:
        allOf:
        - $ref: '#/definitions/handlers.PaginationDetails'
        description: Pagination details
    type: object
  handlers.EventLogSummaryData:
    properties:
      total_count:
        example: 150
        type: integer
      total_failed:
        example: 20
        type: integer
      total_pending:
        example: 0
        type: integer
      total_queued:
        example: 130
        type: integer
    type: object
  handlers.EventLogSummaryResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.EventLogSummaryData'
      message:
        example: Event logs summary retrieved successfully
        type: string
    type: object
  handlers.ExchangeConnectionResponse:
    properties:
      amqp_url:
        description: Full AMQP URL for connection
        example: amqp://acc_1234567890:sample_account_token@localhost:5672/acc_1234567890
        type: string
      exchange:
        description: Exchange ID
        example: ex_jkdfkjdfkdfjkd
        type: string
      host:
        description: Host for AMQP connection
        example: localhost
        type: string
      message:
        description: Message indicating successful retrieval
        example: Exchange connection details retrieved successfully
        type: string
      password:
        description: Password for AMQP connection (user's account token)
        example: sample_account_token
        type: string
      port:
        description: Port for AMQP connection
        example: "5672"
        type: string
      protocol:
        description: Protocol for AMQP connection
        example: AMQP
        type: string
      username:
        description: Username for AMQP connection (user's account ID)
        example: acc_1234567890
        type: string
      virtual_host:
        description: Virtual host (user's account ID)
        example: acc_1234567890
        type: string
    type: object
  handlers.ExchangeDetails:
    properties:
      created_at:
        description: Timestamp of when the exchange was created
        example: "2023-10-01T12:00:00Z"
        type: string
      description:
        description: Description of the exchange
        example: This exchange handles OTP messages.
        type: string
      exchange_id:
        description: ID of the exchange
        example: ex_jkdfkjdfkdfjkd
        type: string
      label:
        description: Label of the exchange
        example: OTP Messages
        type: string
      updated_at:
        description: Timestamp of when the exchange was last updated
        example: "2023-10-01T12:00:00Z"
        type: string
    type: object
  handlers.ExchangeListResponse:
    properties:
      data:
        description: List of exchanges
        items:
          $ref: '#/definitions/handlers.ExchangeDetails'
        type: array
      message:
        description: Message indicating successful retrieval
        example: Exchanges retrieved successfully
        type: string
      pagination:
        allOf:
        - $ref: '#/definitions/handlers.PaginationDetails'
        description: Pagination details
    type: object
  handlers.GenericResponse:
    properties:
      message:
        description: Message indicating the result of the operation
        type: string
    type: object
  handlers.GetPlansResponse:
    properties:
      message:
        description: Operation success message
        example: Plans retrieved successfully
        type: string
      plans:
        description: List of available plans
        items:
          $ref: '#/definitions/handlers.PlanOption'
        type: array
    type: object
  handlers.GetSubscriptionResponse:
    properties:
      auto_renew:
        description: Whether auto-renewal is enabled
        example: true
        type: boolean
      created_at:
        description: Date when subscription was created
        example: "2025-01-01T00:00:00Z"
        type: string
      days_remaining:
        description: Days remaining until expiration (null for unlimited plans)
        example: 22
        type: integer
      expires_at:
        description: Date when subscription expires (null for unlimited plans)
        example: "2025-02-01T00:00:00Z"
        type: string
      id:
        description: Subscription ID
        example: sub_a1b2c3d4e5f6789
        type: string
      message:
        description: Message indicating successful operation
        example: Subscription details retrieved successfully
        type: string
      plan:
        allOf:
        - $ref: '#/definitions/handlers.PlanDetails'
        description: Plan details
      started_at:
        description: Date when subscription started
        example: "2025-01-01T00:00:00Z"
        type: string
      status:
        description: Subscription status
        example: ACTIVE
        type: string
      updated_at:
        description: Date when subscription was last updated
        example: "2025-01-01T00:00:00Z"
        type: string
    type: object
  handlers.GetSubscriptionSummaryResponse:
    properties:
      auto_renew:
        description: Whether auto-renewal is enabled
        example: true
        type: boolean
      available_actions:
        description: List of actions available to the user
        example:
        - '["create_project"'
        - ' "create_api_key"'
        - ' "send_message"]'
        items:
          type: string
        type: array
      days_remaining:
        description: Days remaining until expiration (null for unlimited plans)
        example: 22
        type: integer
      is_expiring_soon:
        description: Whether subscription is expiring within 7 days
        example: false
        type: boolean
      message:
        description: Message indicating successful operation
        example: Subscription summary retrieved successfully
        type: string
      plan_name:
        description: Plan name
        example: FREE
        type: string
      status:
        description: Subscription status
        example: ACTIVE
        type: string
      usage:
        allOf:
        - $ref: '#/definitions/handlers.UsageDetails'
        description: Current usage details
    type: object
  handlers.GetUserResponse:
    properties:
      account_id:
        description: Unique identifier for the user
        example: acc_1234567890
        type: string
      account_token:
        description: Authentication token for the user's account
        example: sample_account_token
        type: string
      email:
        description: Email address associated with the user's account
        example: user@example.com
        type: string
      full_name:
        description: Full name of the user
        example: John Doe
        type: string
      is_email_verified:
        description: Whether the user's email is verified
        example: true
        type: boolean
      message:
        description: Message indicating successful retrieval
        example: User retrieved successfully
        type: string
      subscription:
        description: User's subscription plan
        example: FREE
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        description: User's email address
        example: user@example.com
        type: string
      password:
        description: User's password
        example: MySecretPassword@123
        type: string
    type: object
  handlers.PaginationDetails:
    properties:
      page:
        description: Current page number
        type: integer
      page_size:
        description: Page size
        type: integer
      total:
        description: Total number of items
        type: integer
      total_pages:
        description: Total number of pages
        type: integer
    type: object
  handlers.PlanDetails:
    properties:
      currency:
        description: Currency for the plan price
        example: USD
        type: string
      duration_in_days:
        description: Duration of the plan in days
        example: 30
        type: integer
      id:
        description: Plan ID
        example: 1
        type: integer
      max_api_keys:
        description: Maximum API keys allowed
        example: 3
        type: integer
      max_messages_per_month:
        description: Maximum messages per month allowed
        example: 1000
        type: integer
      max_projects:
        description: Maximum number of projects allowed
        example: 5
        type: integer
      name:
        description: Plan name
        example: FREE
        type: string
      price:
        description: Plan price in cents
        example: 0
        type: integer
    type: object
  handlers.PlanOption:
    properties:
      discount:
        description: Discount percentage for yearly plans
        example: 10
        type: integer
      features:
        description: List of plan features
        example:
        - '["Unlimited projects"'
        - ' "Priority support"'
        - ' "Advanced analytics"]'
        items:
          type: string
        type: array
      id:
        description: Plan ID
        example: 1
        type: integer
      name:
        description: Plan name
        example: PLUS
        type: string
      pricing:
        allOf:
        - $ref: '#/definitions/handlers.PlanPricing'
        description: Plan pricing information
      recommended:
        description: Whether this is the recommended plan
        example: true
        type: boolean
    type: object
  handlers.PlanPricing:
    properties:
      currency:
        description: Currency code
        example: USD
        type: string
      monthly:
        description: Monthly price in cents/smallest currency unit
        example: 999
        type: integer
      yearly:
        description: Yearly price in cents/smallest currency unit
        example: 9999
        type: integer
    type: object
  handlers.QueueConnectionResponse:
    properties:
      amqp_url:
        description: Full AMQP URL for connection
        example: amqp://acc_1234567890:sample_account_token@localhost:5672/acc_1234567890
        type: string
      binding_key:
        description: Binding key or routing key for queue operations
        example: ex_jkdfkjdfkdfjkd.237.62401
        type: string
      exchange:
        description: Exchange ID
        example: ex_jkdfkjdfkdfjkd
        type: string
      host:
        description: Host for AMQP connection
        example: localhost
        type: string
      message:
        description: Message indicating successful retrieval
        example: Queue connection details retrieved successfully
        type: string
      password:
        description: Password for AMQP connection (user's account token)
        example: sample_account_token
        type: string
      port:
        description: Port for AMQP connection
        example: "5672"
        type: string
      protocol:
        description: Protocol for AMQP connection
        example: AMQP
        type: string
      username:
        description: Username for AMQP connection (user's account ID)
        example: acc_1234567890
        type: string
      virtual_host:
        description: Virtual host (user's account ID)
        example: acc_1234567890
        type: string
    type: object
  handlers.QueueDetails:
    properties:
      consumers:
        description: |-
          Number of devices connected to the queue
          This is the number of consumers that are currently consuming messages from this queue.
          It can be used to monitor the load on the queue.
        type: integer
      messages:
        description: |-
          Number of messages in the queue
          This is the number of messages that are currently in the queue waiting to be consumed.
          It can be used to monitor the load on the queue.
        type: integer
      name:
        description: Name of the queue
        type: string
      state:
        description: |-
          Current state of the queue
          This indicates whether the queue is running, idle, or in an error state.
          It can be used to monitor the health of the queue.
          Example values: "running", "idle", "error"
        type: string
    type: object
  handlers.QueueListResponse:
    properties:
      data:
        description: List of queues
        items:
          $ref: '#/definitions/handlers.QueueDetails'
        type: array
      message:
        description: Message indicating successful retrieval
        example: Queues retrieved successfully
        type: string
      pagination:
        allOf:
        - $ref: '#/definitions/handlers.PaginationDetails'
        description: Pagination details
    type: object
  handlers.SendMessageRequest:
    properties:
      content:
        description: The message content to be sent
        example: Hello, World!
        type: string
      exchange_id:
        description: The exchange ID to send the message to
        example: ex_jkdfkjdfkdfjkd
        type: string
      phone_number:
        description: The phone number to send the message to
        example: "+2371234567890"
        type: string
      queue_id:
        description: The queue ID to use for sending the message
        example: exch_jkdfkjdfkdfjkd.237.62401
        type: string
    type: object
  handlers.SignupRequest:
    properties:
      country_code:
        description: User's ISO 3166-1 alpha-2 country code
        example: CM
        type: string
      email:
        description: |-
          User's email address
          required: true
        example: user@example.com
        type: string
      full_name:
        description: Optional full name
        example: John Doe
        type: string
      password:
        description: |-
          User's password
          required: true
        example: MySecretPassword@123
        type: string
    type: object
  handlers.UpdateExchangeRequest:
    properties:
      description:
        description: New description for the exchange
        example: This exchange handles new OTP messages.
        type: string
      label:
        description: New label for the exchange
        example: New OTP Messages
        type: string
    type: object
  handlers.UsageDetails:
    properties:
      api_keys:
        allOf:
        - $ref: '#/definitions/handlers.UsageItem'
        description: API keys usage
      messages_this_month:
        allOf:
        - $ref: '#/definitions/handlers.UsageItem'
        description: Messages sent this month
      projects:
        allOf:
        - $ref: '#/definitions/handlers.UsageItem'
        description: Projects usage
    type: object
  handlers.UsageItem:
    properties:
      current:
        description: Current usage count
        example: 3
        type: integer
      limit:
        description: Maximum allowed (null means unlimited)
        example: 5
        type: integer
      percentage:
        description: Usage percentage (0-100, null if unlimited)
        example: 60
        type: number
    type: object
  handlers.VerifyEmailRequest:
    properties:
      token:
        description: |-
          Email verification token
          required: true
        example: evt_a1b2c3d4e5f6789
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/auth/api-keys:
    get:
      description: Retrieves all API keys for the authenticated user, paginated.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 10, max 100)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of API keys
          schema:
            $ref: '#/definitions/handlers.APIKeyListResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get all API keys (paginated)
      tags:
      - auth
    post:
      description: Creates a new API key for the authenticated user.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: API key created successfully
          schema:
            $ref: '#/definitions/handlers.CreateAPIKeyResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden, no active subscription found or max API keys reached
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Duplicate API key name detected
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create API key
      tags:
      - auth
  /v1/auth/api-keys/{key_id}:
    delete:
      description: Deletes an existing API key for the authenticated user.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: API Key ID
        in: path
        name: key_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API key deleted successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: API key not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete API key
      tags:
      - auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a token.
      parameters:
      - description: Login request payload
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login a user
      tags:
      - auth
  /v1/auth/logout:
    post:
      description: Logs out a user and invalidates the session.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Logout successful
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - auth
  /v1/auth/resend-verification-email:
    post:
      description: Resends verification email (rate limited)
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Verification email resent successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Email already verified
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "429":
          description: Too many requests
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Resend verification email
      tags:
      - auth
  /v1/auth/send-verification-email:
    post:
      description: Sends a verification email to the user's registered email address
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Verification email sent successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Email already verified
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Send verification email
      tags:
      - auth
  /v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: Signup request payload
        in: body
        name: signupRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Signup successful
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Duplicate user
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Register a new user
      tags:
      - auth
  /v1/auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verifies the user's email address using the token sent via email
      parameters:
      - description: Email verification request
        in: body
        name: verifyEmailRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "400":
          description: Bad request or invalid token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "410":
          description: Token expired
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Verify email address
      tags:
      - auth
  /v1/event-logs:
    get:
      description: Retrieves all event logs for the authenticated user, paginated.
        Supports filtering by category and status.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 10, max 100)
        in: query
        name: page_size
        type: integer
      - description: Filter by event category (MESSAGE, PAYMENT, AUTH)
        in: query
        name: category
        type: string
      - description: Filter by event status (PENDING, QUEUED, FAILED)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of event logs
          schema:
            $ref: '#/definitions/handlers.EventLogListResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get event logs (paginated)
      tags:
      - event-logs
  /v1/event-logs/summary:
    get:
      description: Retrieves summary statistics for all event logs for the authenticated
        user by category and status combination. Can be filtered by category.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Filter by event category (MESSAGE, PAYMENT, AUTH)
        in: query
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event logs summary with totals by category and status
          schema:
            $ref: '#/definitions/handlers.EventLogSummaryResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get event logs summary
      tags:
      - event-logs
  /v1/exchanges/:
    get:
      description: Retrieves all exchanges for the authenticated user, paginated.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 10, max 100)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of exchanges
          schema:
            $ref: '#/definitions/handlers.ExchangeListResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get all exchanges (paginated)
      tags:
      - exchanges
    post:
      consumes:
      - application/json
      description: Creates a new exchange for the user.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create exchange request payload
        in: body
        name: createExchangeRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateExchangeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Exchange created successfully
          schema:
            $ref: '#/definitions/handlers.CreateExchangeResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden, no active subscription found or max projects reached
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Duplicate exchange label
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a new exchange
      tags:
      - exchanges
  /v1/exchanges/{exchange_id}:
    delete:
      description: Deletes an existing exchange.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Exchange deleted successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete an exchange
      tags:
      - exchanges
    get:
      description: Retrieves a single exchange by its ID for the authenticated user.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Exchange details retrieved successfully
          schema:
            $ref: '#/definitions/handlers.ExchangeDetails'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get a single exchange
      tags:
      - exchanges
    put:
      consumes:
      - application/json
      description: Update an existing exchange..
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      - description: Update exchange request payload
        in: body
        name: updateExchangeRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateExchangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exchange updated successfully
          schema:
            $ref: '#/definitions/handlers.CreateExchangeResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Duplicate exchange label detected
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update an exchange
      tags:
      - exchanges
  /v1/exchanges/{exchange_id}/connection:
    get:
      consumes:
      - application/json
      description: Retrieves the AMQP connection details for an exchange, including
        virtual host, username, password, and full AMQP URL.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Exchange connection details retrieved successfully
          schema:
            $ref: '#/definitions/handlers.ExchangeConnectionResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get exchange connection details
      tags:
      - exchanges
  /v1/exchanges/{exchange_id}/queues:
    get:
      description: Retrieves all queues bound to a specific exchange, paginated.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 10, max 100)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of queues
          schema:
            $ref: '#/definitions/handlers.QueueListResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get queues for an exchange (paginated)
      tags:
      - exchanges
    post:
      consumes:
      - application/json
      description: Creates a new queue binds it to the specified exchange.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      - description: Create and bind queue request payload. You can get MCC and MNC
          from https://www.mcc-mnc.com/
        in: body
        name: createBindQueueRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateBindQueueRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Queue created and bound successfully
          schema:
            $ref: '#/definitions/handlers.CreateBindQueueResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a queue and bind it to an exchange
      tags:
      - exchanges
  /v1/exchanges/{exchange_id}/queues/{queue_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific queue bound to an exchange. This permanently
        removes the queue and all its messages.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      - description: Queue ID
        in: path
        name: queue_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Queue deleted successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange or queue not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete a queue
      tags:
      - queues
  /v1/exchanges/{exchange_id}/queues/{queue_id}/connection:
    get:
      consumes:
      - application/json
      description: Retrieves the AMQP connection details for connecting to queues,
        including virtual host, username, password, exchange, binding key, and full
        AMQP URL.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      - description: Queue ID
        in: path
        name: queue_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Queue connection details retrieved successfully
          schema:
            $ref: '#/definitions/handlers.QueueConnectionResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get queue connection details
      tags:
      - queues
  /v1/exchanges/{exchange_id}/queues/{queue_id}/purge:
    delete:
      consumes:
      - application/json
      description: Purges all messages from a specific queue bound to an exchange.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exchange ID
        in: path
        name: exchange_id
        required: true
        type: string
      - description: Queue ID
        in: path
        name: queue_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Queue purged successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange or queue not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Purge a queue
      tags:
      - queues
  /v1/messages/bulk-send:
    post:
      consumes:
      - application/json
      - multipart/form-data
      description: Sends multiple messages in bulk. Accepts JSON payload or CSV file
        upload. Processing is done asynchronously.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bulk send message request payload (for JSON)
        in: body
        name: bulkSendMessageRequest
        schema:
          $ref: '#/definitions/handlers.BulkSendMessageRequest'
      - description: CSV file containing message data (for CSV upload)
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "202":
          description: Bulk message processing started
          schema:
            $ref: '#/definitions/handlers.BulkSendMessageResponse'
        "400":
          description: Bad request, missing required fields or invalid data
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden, no active subscription found or monthly message
            limit would be exceeded
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "413":
          description: File too large (CSV only)
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "415":
          description: Unsupported media type, please use application/json or multipart/form-data
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Send multiple messages
      tags:
      - messages
  /v1/messages/send:
    post:
      consumes:
      - application/json
      description: Sends a single message to the specified exchange and phone number.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Send message request payload
        in: body
        name: sendMessageRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.SendMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message processed successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "400":
          description: Bad request, missing required fields or invalid phone number
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden, no active subscription found or monthly message
            limit reached
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Exchange or queue not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Send a single message
      tags:
      - messages
  /v1/plans:
    get:
      consumes:
      - application/json
      description: Retrieves all available subscription plans with monthly and yearly
        pricing options for display to clients.
      produces:
      - application/json
      responses:
        "200":
          description: Plans retrieved successfully
          schema:
            $ref: '#/definitions/handlers.GetPlansResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get available plans
      tags:
      - plans
  /v1/subscriptions/:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about the authenticated user's subscription,
        including plan details, usage limits, and subscription status.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Subscription details retrieved successfully
          schema:
            $ref: '#/definitions/handlers.GetSubscriptionResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: No subscription found for the user
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get user subscription details
      tags:
      - subscriptions
  /v1/subscriptions/summary:
    get:
      consumes:
      - application/json
      description: Retrieves a summary of the user's subscription including current
        usage statistics, limits, and available actions.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Subscription summary retrieved successfully
          schema:
            $ref: '#/definitions/handlers.GetSubscriptionSummaryResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: No subscription found for the user
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get subscription summary with usage statistics
      tags:
      - subscriptions
  /v1/users/:
    delete:
      consumes:
      - application/json
      description: Deletes the authenticated user's account after password confirmation.
        This action is irreversible and will delete all associated data including
        exchanges, queues, and RabbitMQ virtual host.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Account deletion request payload with password confirmation
        in: body
        name: deleteAccountRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.DeleteAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid password or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves the details of the authenticated user.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/handlers.GetUserResponse'
        "401":
          description: Unauthorized, invalid or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - users
  /v1/users/change-password:
    put:
      consumes:
      - application/json
      description: Changes the authenticated user's password after validating the
        current password. The new password must meet security requirements.
      parameters:
      - default: Bearer <your_token_here>
        description: Bearer token for authentication. Replace <your_token_here> with
          a valid token.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Password change request payload with current and new password
        in: body
        name: changePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/handlers.GenericResponse'
        "400":
          description: Bad request, missing required fields or password validation
            failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized, invalid current password or expired session token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
swagger: "2.0"

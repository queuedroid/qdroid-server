// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/auth/signup": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Signup request payload",
                        "name": "signupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Signup successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Duplicate user",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/exchanges/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new exchange for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Create a new exchange",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Create exchange request payload",
                        "name": "createExchangeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Exchange created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Duplicate exchange label",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/users/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "handlers.CreateExchangeRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the exchange",
                    "type": "string",
                    "example": "This exchange handles OTP messages."
                },
                "label": {
                    "description": "Label for the exchange",
                    "type": "string",
                    "example": "OTP Messages"
                }
            }
        },
        "handlers.CreateExchangeResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp of when the exchange was created",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "description": {
                    "description": "Description of the created exchange",
                    "type": "string",
                    "example": "This exchange handles OTP messages."
                },
                "exchange_id": {
                    "description": "ID of the created exchange",
                    "type": "string",
                    "example": "ex_jkdfkjdfkdfjkd"
                },
                "label": {
                    "description": "Label of the created exchange",
                    "type": "string",
                    "example": "OTP Messages"
                },
                "message": {
                    "description": "Message indicating successful creation",
                    "type": "string",
                    "example": "Exchange created successfully"
                },
                "updated_at": {
                    "description": "Timestamp of when the exchange was last updated",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                }
            }
        },
        "handlers.GetUserResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "Unique identifier for the user",
                    "type": "string",
                    "example": "acc_1234567890"
                },
                "account_token": {
                    "description": "Authentication token for the user's account",
                    "type": "string",
                    "example": "sample_account_token"
                },
                "email": {
                    "description": "Email address associated with the user's account",
                    "type": "string",
                    "example": "user@example.com"
                },
                "message": {
                    "description": "Message indicating successful retrieval",
                    "type": "string",
                    "example": "User retrieved successfully"
                },
                "phone_number": {
                    "description": "Phone number associated with the user's account",
                    "type": "string",
                    "example": "+2371234567890"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "MySecretPassword@123"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating successful login",
                    "type": "string",
                    "example": "Login successful"
                },
                "session_token": {
                    "description": "Authentication session token\nThis token is used for subsequent authenticated requests.\nIt should be stored securely by the client.\nShould be used in the Authorization header as a Bearer token.",
                    "type": "string",
                    "example": "sample_session_token"
                }
            }
        },
        "handlers.SignupRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address\nrequired: true",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password\nrequired: true",
                    "type": "string",
                    "example": "MySecretPassword@123"
                },
                "phone_number": {
                    "description": "Optional phone number",
                    "type": "string",
                    "example": "+2371234567890"
                }
            }
        },
        "handlers.SignupResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating successful signup",
                    "type": "string",
                    "example": "Signup successful"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out a user and invalidates the session.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout a user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Logout successful"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/auth/signup": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Signup request payload",
                        "name": "signupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Signup successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Duplicate user",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/event-logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all event logs for the authenticated user, paginated. Supports filtering by category and status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event-logs"
                ],
                "summary": "Get event logs (paginated)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default 10, max 100)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event category (MESSAGE, PAYMENT, AUTH)",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event status (PENDING, QUEUED, FAILED)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of event logs",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventLogListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/exchanges/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all exchanges for the authenticated user, paginated.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Get all exchanges (paginated)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default 10, max 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of exchanges",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new exchange for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Create a new exchange",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Create exchange request payload",
                        "name": "createExchangeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Exchange created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Duplicate exchange label",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/exchanges/{exchange_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a single exchange by its ID for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Get a single exchange",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchange_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing exchange..",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Update an exchange",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchange_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update exchange request payload",
                        "name": "updateExchangeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Duplicate exchange label detected",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing exchange.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Delete an exchange",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchange_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GenericResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/exchanges/{exchange_id}/queues": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all queues bound to a specific exchange, paginated.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Get queues for an exchange (paginated)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchange_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default 10, max 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of queues",
                        "schema": {
                            "$ref": "#/definitions/handlers.QueueListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new queue binds it to the specified exchange.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Create a queue and bind it to an exchange",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchange_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create and bind queue request payload. You can get MCC and MNC from https://www.mcc-mnc.com/",
                        "name": "createBindQueueRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateBindQueueRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Queue created and bound successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateBindQueueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/messages/bulk-send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends multiple messages in bulk. Processing is done asynchronously.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Send multiple messages",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Bulk send message request payload",
                        "name": "bulkSendMessageRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkSendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Bulk message processing started",
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkSendMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields or empty messages array",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/messages/send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a single message to the specified exchange and phone number.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Send a single message",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Send message request payload",
                        "name": "sendMessageRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message processed successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields or invalid phone number",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Exchange or queue not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/users/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour_token_here\u003e",
                        "description": "Bearer token for authentication. Replace \u003cyour_token_here\u003e with a valid token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "handlers.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating successful operation",
                    "type": "string",
                    "example": "Operation successful"
                },
                "session_token": {
                    "description": "Authentication session token\nThis token is used for subsequent authenticated requests.\nIt should be stored securely by the client.\nShould be used in the Authorization header as a Bearer token.",
                    "type": "string",
                    "example": "sample_session_token"
                }
            }
        },
        "handlers.BulkSendMessageRequest": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "List of messages to send",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.SendMessageRequest"
                    }
                }
            }
        },
        "handlers.BulkSendMessageResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of messages accepted for processing",
                    "type": "integer",
                    "example": 5
                },
                "message": {
                    "description": "Message indicating that bulk processing has started",
                    "type": "string",
                    "example": "Bulk message processing started. Check your logs for more details."
                }
            }
        },
        "handlers.CreateBindQueueRequest": {
            "type": "object",
            "properties": {
                "country_code": {
                    "description": "Country code (e.g. 237)",
                    "type": "string",
                    "example": "237"
                },
                "mcc": {
                    "description": "Mobile Country Code (MCC) (e.g. 624)",
                    "type": "string",
                    "example": "624"
                },
                "mnc": {
                    "description": "Mobile Network Code (MNC) (e.g. 01)",
                    "type": "string",
                    "example": "01"
                }
            }
        },
        "handlers.CreateBindQueueResponse": {
            "type": "object",
            "properties": {
                "exchange": {
                    "description": "Exchange ID the queue was bound to",
                    "type": "string",
                    "example": "exch_jkdfkjdfkdfjkd"
                },
                "message": {
                    "description": "Message indicating successful creation and binding",
                    "type": "string",
                    "example": "Queue created and bound to exchange successfully"
                },
                "queue": {
                    "description": "Name of the created queue",
                    "type": "string",
                    "example": "exch_jkdfkjdfkdfjkd_237_11223"
                },
                "routing_key": {
                    "description": "Routing key used for binding",
                    "type": "string",
                    "example": "exch_jkdfkjdfkdfjkd.237.62401"
                },
                "vhost": {
                    "description": "Vhost used for the operation",
                    "type": "string",
                    "example": "acc_1234567890"
                }
            }
        },
        "handlers.CreateExchangeRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the exchange",
                    "type": "string",
                    "example": "This exchange handles OTP messages."
                },
                "label": {
                    "description": "Label for the exchange",
                    "type": "string",
                    "example": "OTP Messages"
                }
            }
        },
        "handlers.CreateExchangeResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp of when the exchange was created",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "description": {
                    "description": "Description of the created exchange",
                    "type": "string",
                    "example": "This exchange handles OTP messages."
                },
                "exchange_id": {
                    "description": "ID of the created exchange",
                    "type": "string",
                    "example": "ex_jkdfkjdfkdfjkd"
                },
                "label": {
                    "description": "Label of the created exchange",
                    "type": "string",
                    "example": "OTP Messages"
                },
                "message": {
                    "description": "Message indicating successful creation",
                    "type": "string",
                    "example": "Exchange created successfully"
                },
                "updated_at": {
                    "description": "Timestamp of when the exchange was last updated",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                }
            }
        },
        "handlers.EventLogDetails": {
            "type": "object",
            "properties": {
                "carrier": {
                    "description": "Carrier used for the message",
                    "type": "string",
                    "example": "MTN"
                },
                "category": {
                    "description": "Event category",
                    "type": "string",
                    "example": "MESSAGE"
                },
                "created_at": {
                    "description": "Timestamp of when the event was created",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "description": {
                    "description": "Event description",
                    "type": "string",
                    "example": "Message sent successfully"
                },
                "eid": {
                    "description": "Event ID",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "exchange_id": {
                    "description": "Exchange ID associated with the event",
                    "type": "string",
                    "example": "ex_jkdfkjdfkdfjkd"
                },
                "queue_id": {
                    "description": "Queue ID",
                    "type": "string",
                    "example": "exch_jkdfkjdfkdfjkd.237.62401"
                },
                "queue_name": {
                    "description": "Queue name",
                    "type": "string",
                    "example": "exch_jkdfkjdfkdfjkd_237_62401"
                },
                "status": {
                    "description": "Event status",
                    "type": "string",
                    "example": "QUEUED"
                },
                "to": {
                    "description": "Recipient phone number or email",
                    "type": "string",
                    "example": "+2371234567890"
                },
                "updated_at": {
                    "description": "Timestamp of when the event was last updated",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                }
            }
        },
        "handlers.EventLogListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of event logs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.EventLogDetails"
                    }
                },
                "message": {
                    "description": "Message indicating successful retrieval",
                    "type": "string",
                    "example": "Event logs retrieved successfully"
                },
                "pagination": {
                    "description": "Pagination details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.PaginationDetails"
                        }
                    ]
                }
            }
        },
        "handlers.ExchangeDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp of when the exchange was created",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "description": {
                    "description": "Description of the exchange",
                    "type": "string",
                    "example": "This exchange handles OTP messages."
                },
                "exchange_id": {
                    "description": "ID of the exchange",
                    "type": "string",
                    "example": "ex_jkdfkjdfkdfjkd"
                },
                "label": {
                    "description": "Label of the exchange",
                    "type": "string",
                    "example": "OTP Messages"
                },
                "updated_at": {
                    "description": "Timestamp of when the exchange was last updated",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                }
            }
        },
        "handlers.ExchangeListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of exchanges",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ExchangeDetails"
                    }
                },
                "message": {
                    "description": "Message indicating successful retrieval",
                    "type": "string",
                    "example": "Exchanges retrieved successfully"
                },
                "pagination": {
                    "description": "Pagination details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.PaginationDetails"
                        }
                    ]
                }
            }
        },
        "handlers.GenericResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating the result of the operation",
                    "type": "string"
                }
            }
        },
        "handlers.GetUserResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "Unique identifier for the user",
                    "type": "string",
                    "example": "acc_1234567890"
                },
                "account_token": {
                    "description": "Authentication token for the user's account",
                    "type": "string",
                    "example": "sample_account_token"
                },
                "email": {
                    "description": "Email address associated with the user's account",
                    "type": "string",
                    "example": "user@example.com"
                },
                "full_name": {
                    "description": "Full name of the user",
                    "type": "string",
                    "example": "John Doe"
                },
                "message": {
                    "description": "Message indicating successful retrieval",
                    "type": "string",
                    "example": "User retrieved successfully"
                },
                "phone_number": {
                    "description": "Phone number associated with the user's account",
                    "type": "string",
                    "example": "+2371234567890"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "MySecretPassword@123"
                }
            }
        },
        "handlers.PaginationDetails": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "Current page number",
                    "type": "integer"
                },
                "page_size": {
                    "description": "Page size",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer"
                },
                "total_pages": {
                    "description": "Total number of pages",
                    "type": "integer"
                }
            }
        },
        "handlers.QueueDetails": {
            "type": "object",
            "properties": {
                "consumers": {
                    "description": "Number of devices connected to the queue\nThis is the number of consumers that are currently consuming messages from this queue.\nIt can be used to monitor the load on the queue.",
                    "type": "integer"
                },
                "messages": {
                    "description": "Number of messages in the queue\nThis is the number of messages that are currently in the queue waiting to be consumed.\nIt can be used to monitor the load on the queue.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the queue",
                    "type": "string"
                },
                "state": {
                    "description": "Current state of the queue\nThis indicates whether the queue is running, idle, or in an error state.\nIt can be used to monitor the health of the queue.\nExample values: \"running\", \"idle\", \"error\"",
                    "type": "string"
                }
            }
        },
        "handlers.QueueListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of queues",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.QueueDetails"
                    }
                },
                "message": {
                    "description": "Message indicating successful retrieval",
                    "type": "string",
                    "example": "Queues retrieved successfully"
                },
                "pagination": {
                    "description": "Pagination details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.PaginationDetails"
                        }
                    ]
                }
            }
        },
        "handlers.SendMessageRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "The message content to be sent",
                    "type": "string",
                    "example": "Hello, World!"
                },
                "exchange_id": {
                    "description": "The exchange ID to send the message to",
                    "type": "string",
                    "example": "ex_jkdfkjdfkdfjkd"
                },
                "phone_number": {
                    "description": "The phone number to send the message to",
                    "type": "string",
                    "example": "+2371234567890"
                },
                "queue_id": {
                    "description": "The queue ID to use for sending the message",
                    "type": "string",
                    "example": "exch_jkdfkjdfkdfjkd.237.62401"
                }
            }
        },
        "handlers.SignupRequest": {
            "type": "object",
            "properties": {
                "country_code": {
                    "description": "User's ISO 3166-1 alpha-2 country code",
                    "type": "string",
                    "example": "CM"
                },
                "email": {
                    "description": "User's email address\nrequired: true",
                    "type": "string",
                    "example": "user@example.com"
                },
                "full_name": {
                    "description": "Optional full name",
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "description": "User's password\nrequired: true",
                    "type": "string",
                    "example": "MySecretPassword@123"
                },
                "phone_number": {
                    "description": "Optional phone number",
                    "type": "string",
                    "example": "+2371234567890"
                }
            }
        },
        "handlers.UpdateExchangeRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "New description for the exchange",
                    "type": "string",
                    "example": "This exchange handles new OTP messages."
                },
                "label": {
                    "description": "New label for the exchange",
                    "type": "string",
                    "example": "New OTP Messages"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

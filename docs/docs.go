// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/apikey": {
            "get": {
                "description": "Retrieves the API key for the authenticated user.\nNote: The Authorization header must contain the session_token obtained from the login endpoint, in the format \"Bearer {token}\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get a user's API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {token} (session_token from login)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetOneAPIKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/auth/signup": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Signup request payload",
                        "name": "signupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Signup successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Duplicate user",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "handlers.GetOneAPIKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "label": {
                    "type": "string",
                    "example": "My API Key"
                },
                "last_used_at": {
                    "type": "string"
                },
                "seen": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": "sample_api_key_token"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "MySecretPassword@123"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating successful login",
                    "type": "string",
                    "example": "Login successful"
                },
                "session_token": {
                    "description": "Authentication session token\nThis token is used for subsequent authenticated requests.\nIt should be stored securely by the client.\nShould be used in the Authorization header as a Bearer token.",
                    "type": "string",
                    "example": "sample_session_token"
                }
            }
        },
        "handlers.SignupRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address\nrequired: true",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password\nrequired: true",
                    "type": "string",
                    "example": "MySecretPassword@123"
                },
                "phone_number": {
                    "description": "Optional phone number",
                    "type": "string",
                    "example": "+2371234567890"
                }
            }
        },
        "handlers.SignupResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating successful signup",
                    "type": "string",
                    "example": "Signup successful"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
